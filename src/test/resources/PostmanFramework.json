{
	"info": {
		"_postman_id": "b3b8dab3-0064-4817-babd-8339418ef012",
		"name": "RESTful API basics: CRUD, test & variable",
		"description": "# üöÄ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## üîñ **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these request types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a variable called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## üí™ Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more scripts in \"Tests\" to verify if the API works as expected and execute flows.\n    \n\n## ‚ÑπÔ∏è Resources\n\n[Building requests](https://learning.postman.com/docs/sending-requests/requests/)  \n[Authorizing requests](https://learning.postman.com/docs/sending-requests/authorization/)  \n[Using variables](https://learning.postman.com/docs/sending-requests/variables/)  \n[Managing environments](https://learning.postman.com/docs/sending-requests/managing-environments/)  \n[Writing scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28222333"
	},
	"item": [
		{
			"name": "CREATE PERSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Generate random first names, last names, and countries",
							"function generateRandomFirstName() {",
							"    const firstNames = [\"Emma\",",
							"  \"Liam\",",
							"  \"Olivia\",",
							"  \"Noah\",",
							"  \"Ava\",",
							"  \"Sophia\",",
							"  \"Isabella\",",
							"  \"Mia\",",
							"  \"Charlotte\",",
							"  \"Amelia\",",
							"  \"Harper\",",
							"  \"Evelyn\",",
							"  \"Abigail\",",
							"  \"Emily\",",
							"  \"Elizabeth\",",
							"  \"Mila\",",
							"  \"Ella\",",
							"  \"Avery\",",
							"  \"Sofia\",",
							"  \"Camila\",",
							"  \"Aria\",",
							"  \"Scarlett\",",
							"  \"Victoria\",",
							"  \"Madison\",",
							"  \"Luna\",",
							"  \"Grace\",",
							"  \"Chloe\",",
							"  \"Penelope\",",
							"  \"Layla\",",
							"  \"Riley\",",
							"  \"Zoey\",",
							"  \"Nora\",",
							"  \"Lily\",",
							"  \"Eleanor\",",
							"  \"Hannah\",",
							"  \"Lillian\",",
							"  \"Addison\",",
							"  \"Aubrey\",",
							"  \"Ellie\",",
							"  \"Stella\",",
							"  \"Natalie\",",
							"  \"Zoe\",",
							"  \"Leah\",",
							"  \"Hazel\",",
							"  \"Violet\",",
							"  \"Aurora\",",
							"  \"Savannah\",",
							"  \"Audrey\",",
							"  \"Brooklyn\",",
							"  \"Bella\",",
							"  \"Claire\"]; // Add more names as needed",
							"",
							"    const randomIndex = Math.floor(Math.random() * firstNames.length);",
							"    return firstNames[randomIndex];",
							"}",
							"",
							"function generateRandomLastName() {",
							"    const lastNames = [\"Smith\",",
							"  \"Johnson\",",
							"  \"Williams\",",
							"  \"Brown\",",
							"  \"Jones\",",
							"  \"Miller\",",
							"  \"Davis\",",
							"  \"Garcia\",",
							"  \"Rodriguez\",",
							"  \"Wilson\",",
							"  \"Martinez\",",
							"  \"Anderson\",",
							"  \"Taylor\",",
							"  \"Thomas\",",
							"  \"Hernandez\",",
							"  \"Moore\",",
							"  \"Martin\",",
							"  \"Jackson\",",
							"  \"Thompson\",",
							"  \"White\",",
							"  \"Lopez\",",
							"  \"Lee\",",
							"  \"Gonzalez\",",
							"  \"Harris\",",
							"  \"Clark\",",
							"  \"Lewis\",",
							"  \"Young\",",
							"  \"Hall\",",
							"  \"Walker\",",
							"  \"Allen\",",
							"  \"King\",",
							"  \"Wright\",",
							"  \"Scott\",",
							"  \"Torres\",",
							"  \"Nguyen\",",
							"  \"Hill\",",
							"  \"Flores\",",
							"  \"Green\",",
							"  \"Adams\",",
							"  \"Nelson\",",
							"  \"Baker\",",
							"  \"Hall\",",
							"  \"Rivera\",",
							"  \"Campbell\",",
							"  \"Mitchell\",",
							"  \"Carter\",",
							"  \"Roberts\",",
							"  \"Gomez\",",
							"  \"Phillips\",",
							"  \"Evans\"]; // Add more names as needed",
							"  ",
							"    const randomIndex = Math.floor(Math.random() * lastNames.length);",
							"    return lastNames[randomIndex];",
							"}",
							"",
							"function generateRandomCountry() {",
							"    const countries = [\"Afghanistan\",",
							"  \"Albania\",",
							"  \"Algeria\",",
							"  \"Andorra\",",
							"  \"Angola\",",
							"  \"Antigua and Barbuda\",",
							"  \"Argentina\",",
							"  \"Armenia\",",
							"  \"Australia\",",
							"  \"Austria\",",
							"  \"Azerbaijan\",",
							"  \"Bahamas\",",
							"  \"Bahrain\",",
							"  \"Bangladesh\",",
							"  \"Barbados\",",
							"  \"Belarus\",",
							"  \"Belgium\",",
							"  \"Belize\",",
							"  \"Benin\",",
							"  \"Bhutan\",",
							"  \"Bolivia\",",
							"  \"Bosnia and Herzegovina\",",
							"  \"Botswana\",",
							"  \"Brazil\",",
							"  \"Brunei\",",
							"  \"Bulgaria\",",
							"  \"Burkina Faso\",",
							"  \"Burundi\",",
							"  \"Cabo Verde\",",
							"  \"Cambodia\",",
							"  \"Cameroon\",",
							"  \"Canada\",",
							"  \"Central African Republic\",",
							"  \"Chad\",",
							"  \"Chile\",",
							"  \"China\",",
							"  \"Colombia\",",
							"  \"Comoros\",",
							"  \"Congo\",",
							"  \"Costa Rica\",",
							"  \"Croatia\",",
							"  \"Cuba\",",
							"  \"Cyprus\",",
							"  \"Czech Republic\",",
							"  \"Denmark\",",
							"  \"Djibouti\",",
							"  \"Dominica\",",
							"  \"Dominican Republic\"]; // Add more countries as needed",
							"",
							"    const randomIndex = Math.floor(Math.random() * countries.length);",
							"    return countries[randomIndex];",
							"}",
							"",
							"// Generate random age, height, weight, and married status",
							"function generateRandomAge() {",
							"    return Math.floor(Math.random() * (100 - 18 + 1) + 18);",
							"}",
							"",
							"function generateRandomHeight() {",
							"    return Math.floor(Math.random() * (200 - 155 + 1) + 155);",
							"}",
							"",
							"function generateRandomWeight() {",
							"    return (Math.random() * (120 - 70) + 70).toFixed(1);",
							"}",
							"",
							"function generateRandomMarriedStatus() {",
							"    return Math.random() < 0.5;",
							"}",
							"",
							"// Perform the loop to create 50 persons",
							"for (let i = 1; i <= 50; i++) {",
							"    const person = {",
							"        personId: i.toString(),",
							"        firstName: generateRandomFirstName(),",
							"        lastName: generateRandomLastName(),",
							"        age: generateRandomAge(),",
							"        heightInCm: generateRandomHeight(),",
							"        weightInKg: generateRandomWeight(),",
							"        country: generateRandomCountry(),",
							"        married: generateRandomMarriedStatus()",
							"    };",
							"",
							"    setTimeout(function () {",
							"        pm.test(`Create person ${i}`, function () {",
							"            pm.sendRequest({",
							"                url: pm.variables.get('base_url_') + pm.variables.get('path'), // Reference environment variables",
							"                method: 'POST',",
							"                header: [",
							"                    { key: 'Content-Type', value: 'application/json' }",
							"                ],",
							"                body: {",
							"                    mode: 'raw',",
							"                    raw: JSON.stringify(person)",
							"                }",
							"            }, function (err, response) {",
							"                pm.response.to.have.status(200); // Adjust status code if necessary",
							"                pm.expect(err).to.be.null;",
							"            },",
							"            pm.test(\"Statuscode ot be 200, 201, 202\", function () {",
							"            pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
							"            }));",
							"        });",
							"        pm.test(\"Successful POST request\", function () {",
							"            pm.expect(pm.response.text()).to.include(\"New person successfully created.\");",
							"            });",
							"",
							"    }, i * 1000); // Delay each request by i seconds",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"personId\": \"1\",\n    \"firstName\": \"Billy\",\n    \"lastName\": \"Cowboy\",\n    \"age\": 55,\n    \"heightInCm\": 185,\n    \"weightInKg\": 85.0,\n    \"country\": \"Spain\",\n    \"married\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url_}}{{path}}",
					"host": [
						"{{base_url_}}{{path}}"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "GET ALL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {",
							"    \"personId\": { \"type\": \"string\" },",
							"    \"firstName\": { \"type\": \"string\" },",
							"    \"lastName\": { \"type\": \"string\" },",
							"    \"age\": { \"type\": \"number\" },",
							"    \"heightInCm\": { \"type\": \"number\" },",
							"    \"weightInKg\": { \"type\": \"number\" },",
							"    \"country\": { \"type\": \"string\" },",
							"    \"married\": { \"type\": \"boolean\" }",
							"}",
							"",
							"const jsonData = pm.response.json();",
							"const bookID = jsonData.ID;",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
							"});",
							"",
							"pm.test(\"Response matches the expected schema\", function () {",
							"    pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"});",
							"",
							"pm.test(\"Headers cookies responseTime validations\", function(){",
							"    pm.response.to.have.header(\"Content-Type\"); //Check of contype type header aanwezig is",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\"); ",
							"    pm.expect(pm.response.text()).to.include(\"married\"); //Check of succesfully added in de response zit",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url_}}{{path}}",
					"host": [
						"{{base_url_}}{{path}}"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "UPDATE PERSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Loop through the 50 people",
							"for (let i = 1; i <= 50; i++) {",
							"    setTimeout(function () {",
							"        pm.test(`Update person ${i}`, function () {",
							"            pm.sendRequest({",
							"                url: pm.variables.get('base_url_') + pm.variables.get('path'), // Use the personId extracted from the POST request",
							"                method: 'PUT',",
							"                header: [",
							"                    { key: 'Content-Type', value: 'application/json' }",
							"                ],",
							"                body: {",
							"                    mode: 'raw',",
							"                    raw: JSON.stringify({",
							"                        personId: i,",
							"                        firstName: 'updated firstName',",
							"                        lastName: 'updated lastName',",
							"                        age: 1000,",
							"                        heightInCm: 1000,",
							"                        weightInKg: 1000.0,",
							"                        country: 'updated country',",
							"                        married: true",
							"                    })",
							"                }",
							"            }, function (err, response) {",
							"                pm.response.to.have.status(200); // Adjust status code if necessary",
							"                pm.expect(err).to.be.null;",
							"            },",
							"            pm.test(\"Successful PUT request\", function () {",
							"                pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
							"                pm.expect(pm.response.json().firstName).to.equal('updated firstName');",
							"                pm.expect(pm.response.json().lastName).to.equal('updated lastName');",
							"                pm.expect(pm.response.json().age).to.equal(1000);",
							"                pm.expect(pm.response.json().heightInCm).to.equal(1000);",
							"                pm.expect(pm.response.json().weightInKg).to.equal(1000.0);",
							"                pm.expect(pm.response.json().country).to.equal('updated country');",
							"                pm.expect(pm.response.json().married).to.equal(true);",
							"                pm.expect(pm.response.text()).to.include(\"Person successfully updated.\");",
							"            }));",
							"        });",
							"    }, i * 1000); // Delay each request by i seconds",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"personId\": \"1\",\n    \"firstName\": \"updated firstName\",\n    \"lastName\": \"updated lastName\",\n    \"age\": 0,\n    \"heightInCm\": 0,\n    \"weightInKg\": 0.0,\n    \"country\": \"updated country\",\n    \"married\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url_}}{{path}}",
					"host": [
						"{{base_url_}}{{path}}"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "DELETE PERSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Delete Requests for Multiple IDs\", function () {",
							"  const ids = [];",
							"",
							"  for (let i = 1; i <= 50; i++) {",
							"    ids.push(i);",
							"  }",
							"",
							"  ids.forEach(id => {",
							"    const url = `${pm.variables.get(\"base_url_\")}${pm.variables.get(\"path\")}/${id}`;",
							"",
							"    pm.sendRequest({",
							"      url: url,",
							"      method: 'DELETE',",
							"    },",
							"    pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"    }), ",
							"    pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"    }));",
							"  });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url_}}{{path}}/{{id}}",
					"host": [
						"{{base_url_}}{{path}}"
					],
					"path": [
						"{{id}}"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}